Relational Databases -

Data Example: Movies
id  | title                         |  studio
----+-------------------------------+--------------------------------------
1   | Star Wars: The Force Awakens  |  Walt Disney Studios Motion Pictures
2   | Avatar                        |  20th Century Fox
3   | Black Panther                 |  Walt Disney Studios Motion Pictures
4   | Jurassic World                |  Universal Pictures
5   | Marvel’s The Avengers         |  Walt Disney Studios Motion Pictures

So much duplication. What if we want other info about studios?

A Better Way:

id | title                         | studio_id
---+-------------------------------+-----------
1  | Star Wars: The Force Awakens  |  1
2  | Avatar                        |  2
3  | Black Panther                 |  1
4  | Jurassic World                |  3
5  | Marvel’s The Avengers         |  1

id | name                                |   founded_in
---+-------------------------------------+----------------
1  | Walt Disney Studios Motion Pictures |   1953-06-23
2  | 20th Century Fox                    |   1935-05-31
3  | Universal Pictures                  |   1912-04-30


One-to-Many (1:M):
- Our 'studio_id' column provides us with a reference to the corresponding 
    record in the 'studios' table by its primary key.
- Typically this is implemented with a *foreign key constraint*, which 
    makes sure every 'studio_id' exists somewhere in the 'studios' table.
- One-to-Many (1:M) in the sense that one studio *has many* movies, but 
    each movie *has one* studio.
- In this example, we can say 'movies' is the *referencing* table, and 
    'studios' is the *referenced* table.

The Foreign Key Constraint:
Setting up a foreign key constraint with DDL:
    CREATE TABLE studios
      (id SERIAL PRIMARY KEY,
       name TEXT,
       founded_in TEXT);
    
    CREATE TABLE movies
      (id SERIAL PRIMARY KEY,
       title TEXT,
       studio_id INTEGER REFERENCES studios (id));
​
Constraints are specified by the DDL, but affect DML query behavior.

    INSERT INTO studios (name, founded_in) VALUES
      ('Walt Disney Studios Motion Pictures', '1953-06-23'),
      ('20th Century Fox', '1935-05-31'),
      ('Universal Pictures', '1912-04-30');
​
-- reference Disney's primary key
    INSERT INTO movies (title, studio_id)
      VALUES ('Star Wars: The Force Awakens', 1);
​
-- Throws an Foreign Key Constraint Error...
--  There is no studio with a primary key of 1000
    INSERT INTO movies (title, studio_id)
      VALUES ('Black Panther', 1000);

Deleting Data Examples:

When trying to delete a studio...ee cannot delete it outright while movies
still reference it.

    ```sql
    DELETE FROM studios WHERE id=1;  -- error
    ```

Option 1: Clear out the ***studio_id*** columns of movies that reference it.

    ```sql
    UPDATE movies SET studio_id=NULL WHERE studio_id=1;
    DELETE FROM studios WHERE id=1;
    ```

Option 2: Delete the movies associated with that studio first.

    ```sql
    DELETE FROM movies WHERE studio_id=1;
    DELETE FROM studios WHERE id=1;
    ```

What are the trade-offs? 
We will revisit this when we look at how to implement each of the two 
options above in the DDL.

Many-to-Many (M:N):
Movies Revisited:
- We’ve seen an example of a  relationship: one studio has many movies, 
    and one movie belongs to one studio.
    one-to-many
- But not every relationship can be expressed in this way…
- Consider actors: one movie has many different actors, but each actor 
    also has roles in many different movies.
- This is an example of a many-to-many relationship.
- A many-to-many is just two one-to-manys back-to-back.

Setting Up Actors and Roles:
-- We've already created the movies database
    CREATE TABLE actors
      (id SERIAL PRIMARY KEY,
       first_name TEXT,
       last_name TEXT,
       birth_date TEXT);

    CREATE TABLE roles
      (id SERIAL PRIMARY KEY,
       movie_id INTEGER REFERENCES movies (id),
       actor_id INTEGER REFERENCES actors (id));
