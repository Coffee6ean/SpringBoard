DDL Basics - 

Creating and Dropping Databases:

    ```sql
    CREATE DATABASE yet_another_db;

    DROP DATABASE yet_another_db;
​    ```
Same as shell commands createdb and dropdb
-- Creating Tables
    jane=# CREATE DATABASE library;

    ```sql
    CREATE DATABASE
    ```

    jane=# \c library
-- You are now connected to database "library" as user "jane".
    library=#

​    ```sql
    CREATE TABLE books (
      id SERIAL PRIMARY KEY,
      title TEXT,
      author TEXT,
      price FLOAT,
      page_count INTEGER,
      publisher TEXT,
      publication_date DATE
    );
    ```

Inspecting Tables in PostgreSQL:
-- Listing the tables in the database
    library=# \dt
​
-- Listing the column names and types in a specific table
    library=# \d+ books
​
Dropping Tables:

    ```sql
    DROP TABLE users;
    ```

Column Data Types:
- Integer: Integer numbers
- Float: Floating-point numbers (you can specify the precision)
- Text: Text Strings
- Varchar: Text Strings, but limited to a certain size
- Boolean: True or False
- Date Date: (without time)
- Timestamp: Date and time
- Serial: Auto-incrementing numbers (used for primary keys)

NULL:
*NULL* is a special value in SQL for “unknown”. It’s not the same thing as
0 or an empty string. *NULL* values are ok when you really might have 
missing/unknown data

But generally, they’re a pain, so it can be a good idea to make fields not nullable

Primary Keys:
Every table should have a “primary key”, a unique way to identify rows

Primary keys *must be*:
- Unique
- Not Null
Primary keys *should be*:
- Unchanging (it’s a pain when primary keys change)

Constraints:
Constraints are a basic form of validation. The database can prevent basic 
types of unintended behavior.
- Primary Key (every table must have a unique identifier)
- Unique (prevent duplicates in the column)
- Not Null (prevent null in the column)
- Check (do a logical condition before inserting / updating)
- Foreign Key (column values must reference values in another table)

Column Manipulation:
Adding / Removing / Renaming columns
    ```sql
    ALTER TABLE books ADD COLUMN in_paperback BOOLEAN;

    ALTER TABLE books DROP COLUMN in_paperback;

    ALTER TABLE books RENAME COLUMN page_count TO num_pages;
    ```