jQuery - 
What is jQuery?
It's a library for:
- Manipulating DOM
- Adding Event Listeners
- Animating Elements
- Making HTTP Requests (AJAX)

*For more info: https://api.jquery.com & https://code.jquery.com

Why should you still learn jQuery?
- Brevity and clarity
- Strong Cross-Browser Support
- Great for porto-typing

Why might you not use jQuery?
- The DOM API is much more standardized
- It doesn't do anything you can't do on your own

Selecting Elements - 
jQuery(): Return a collection of matched elements either found in the DOM 
based on passed argument(s) or created by passing an HTML string
    -> $("ul")
       //like document.querySelectorAll,
       //this will select all ul's
    -> $("#todo-container")
    -> $(".carousel-image")
       //like document.querySelectorAll,
       //this will select all the elements with that class

What does this give you?
A jQuery method returns a jQuery object - not the same as a node 
    -> $("h1") instanceof NodeList //false
    -> $("h1").get() //[h1]
    => $("h1").get(0) //<h1>Rome</h1>

jQuery Methods -
jQuery getter/setter pattern:
- Vanilla JS: '.getAttribute(attrName)' and '.setAttribute(attrName, newVal)'
- jQuery: '.attr(attrName, newVal)' *second param is optional

- .text(): Get the combined text contents of each element in the set of matched
    elements, including their descendants, or set the text contents of the 
    matched elements
    -> $("p").text();  // "Rome\n         (\n        Italian\n         and \n"
    -> $("p").text("LOL no. Mucho texto");

- .html(): Get the HTML contents of the first element in the set of matched
    elements or set the HTML contents of every matched element
    -> $("p").html()  //\n        <b>Rome</b>\n         (\n        <a href="/wiki/Ita..
    -> $("p").html("<b>Bold</b>")

- .attr(): Get the value of an attribute for the firts element in the set
    of matched elements or set one or more attributes for every matched
    element
    -> $("a").attr("href")  // '/wiki/Italian_language'
    -> $("a").attr("href", "https://www.chickennuggets.com");

    -> const newAttrs = {src: "https://upload.wikipedia.org",
                         alt: "Lava Flow"}
    -> $("span").attr(newAttrs)

- .val(): Get the current value of the first element in the set of matched
    elements or set the value of every matched element.
- .eq(): Reduce the set of matched elements to the one at the specified 
    index.
- .css(): Get the value of a computed style property for the first element
    in the set of matched elements or set one or more CSS properties for 
    every matched element.
    -> document.querySelector("a").style.color  //""
    -> $("a").css("color") //'rgb(0, 0, 238)'
    -> $("a").css("font-size") //'16px'

    -> const bigTealStyles = {color: "teal", "font-size" : "40px" }
    -> $("a").css(bigTealStyles);

- .addClass(): Adds the specified class(es) to each element in the set of 
    matched elements.
    -> $("h1").addClass("highlight");
    -> $("h1").removeClass("highlight")
    -> $("h1").toggleClass("highlight")

Chaining with jQuery -
Almost all jQuery methods return a jQuery object, which allows for method
chaining
    -> const $h1 = $("h1");
    -> $h1.css("background-color", "purple").addClass("highlight").text("chaining")

jQuery Traversal -

jQuery Creating, Appending and Removing Elements - 
    -> $("ul").append("<li class='highlight'>I am new</li>");
    -> $("li").prepend("<input type='checkbox'/>");
       //Creates a new h1
    -> $("<h1>Hello</h1>").css("color", "orange").appendTo("p")  
    -> $("li").after("<bold>Hi</bold>");
    -> $("h1").remove();

Events and Delegation with jQuery -
jQuery's 'on()' works similarly to 'addEventListener'. It lets you specify 
the type of event to listen for
    -> $("#submit").on("click", function() {
        console.log("Another click");
       });

    -> $("img").click(function() {
        alert("Hello");
       })

Why use on?
In most cases, 'click()' and 'on("click")' will both get the job done. 
However, there is one kewy difference:
- '.click(callback)' is a shorthand for '.on("click", callback)'
- 'on()' accepts optional argumnets between type of event and callback