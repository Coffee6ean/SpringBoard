Git -
1. What is Git?
Git is a tool that allows developers to track versions of their code over 
time.
It does this by creating 'snapshots' of the current state of the code base
whenever you tell it to - this is what makes Git essential when collaborating
with other developers to ensure the previous 'snapshots' of the code can be
revisited if necessary.

'VCS' is a common acronym that stands for Version Control System. Git is a 
VCS because it lets you create different versions of your code and easily
swap back and forth between different versions 
Git and GitHub are different

Once you have Git installed, you need to "initialize" a repository with Git 
before you can start using it - for this, we run 'git init' inside of a folder;
this is equivalent of generating an instance of Git within that folder, and the
repo will store the different snapshots for all changes made

Branching -
So far in our Git workflow we've only been working on a single branch. But 
when you're working with a team, this isn't usually desirable.
What if you want to go off on your own and work on some experimental new
feature?

You want to be able to work without worrying about breaking the current code
or conflicting with other coders.

Merging - 
With a branch workflow, we usually create a new brach for something we are
working on (a new feature, redisign, etc.). Traditionally the 'maste'/'main'
branch is reserved for production code and immediate bug fixes.

When we are done modifying our branch, we nee to merge the code into the 
master branch.

Once we have finished working on a branch we can merge it to the master branch
using the git merge command.
Depending on the history of our commits, this will either be a:
1. Fast forward merge: This is when git can easily tell when the commits 
        happen and 'put' one set of commits on top of another chronologically.
        However, it is common to have different commits happen at different
        times on two branches. If the commits are not chronological a recursive
        merge is necessary.
2. Recursive merge: It's an algorithm git uses to merge branches when a simple
        fast-forward won't suffice.

Merging Conflicts -
Another common issue is when changes are committed to the same file from two 
different branches. If two developers working on the same file the code is often
not going to sync up properly. This will result in a merge conflict.
Git can't know which commit to go with, so a human will be required to make a
decision

GitHub -
GitHub is a web-based Git repository hostimg service. Simply put is a tool that
enables collaboration by hosting shared Git repositories that teams of developers 
can all contribute to.
While GitHub uses Git, the functionality ot provides is very different from Git.
In short, Git is a Version Control System. GitHub is an online platform for hosting
and sharing code, text files and even more complex file formats.

Why use GitHub?
1. It provides a great  way for you to store your code in a remote location
2. It's a fantastic way to collaborate with other developers both privately and 
   publicly

What is a remote?
It's a nickname for a URL where your respository lives. Instead of typing/remembering
the entire URL, we give it a nickname - by defualt this nickname is 'origin'

README.md file -
Markdown syntax

GitHub Pages -
Deploy scripts through the html (ussually synced to the 'master' branch)
Create a static http for your CSS, HTML and JavaScript codes so that other may access the
link and see your projects. 'Static' bec uase you are not implementing DB's or backend -
pure client side stuff
Settings > GitHub Pages 

Git commands -
- git init: To initialize a git repo in a directory
- git status: Command to check-up on a git repository for a directory. If it 
        prompts 'fatal: not a git repository ...: .git', then that current 
        directory doesn't have a git repo instance
- rm -rf .git: Command to delete git repo instance of current directory
- git add: Command used to save our modified files so that they will be 
        included in the next commit
- git commit: Once we are satisfied with the work of a file in our staging
        area we commit it to the local repository. We include a commit message 
        that summarizes the changes that were made in that commit:
        [git commit -m "summary of this commit"]
    * A commit is still local until we push it to a remote repository
- git push:
- git log: Command to see a log of all commits made to the repo.
        [git log --oneline] will display a summary of all commits made
- git diff: Command to display what's been changed among the files
- git branch: Command will list all branches and highlight the one that's
        that's currently on. To create a new branch [git branch branch_name]
- git checkout branch_name: Command to change branches
        [git checkout -b branch_name] will create and change to a new branch
- git branch -d branch_name: Command to delete a branch. In this instance, 
        commits can be saved if they are merged to masater before delition, with
        [git branch -D branch_name] the branch and all commits made within will
        be lost
- git merge branch_name: Command to bring all commits from the declared branch
        to our standing branch
-> git remote add origin remote_repo_url: Add a remote repo to local git 
        instance. [git remote -v], check for current declared remote repo url
-> git push -u origin master: Command to send our code from local repository to
        our remote repository (which was aliased to 'origin'). The '-u' flag
        allows us in the future to only have to type 'git push' instead of 
        'git push origin master'
-> git push origin branch_name: Command to add new branch to remote repo
-> git clone remote_repo_url: To clone and initialize a remote repo in local
        directory. In a cloned repo I can modify and add commits but I will not
        be able tu push them since im not the repo owner
-> git pull: pull all changes and commits from remote repo to local repo.
        [git pull origin branch_name]