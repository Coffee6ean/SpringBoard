//--- Modifying the DOM ---//

//--- Accessing Text ---//
- innerText: The easiest way to access the text of an element.
    //Retrieve 
    -> const mainGreeting = document.getElemenById("main-greeting");
    -> console.log(mainGreeting.innerText);
    => "Hello World";
    //Set
    -> const ol = document.getElementsByTagName("ol")[0];
    -> ol.innerText // => "General Sherman Tree Hello!
                           GeneralGrant Tree
                           President Tree
                           Lincoln Tree"
    -> ol.innerText = "Hello World!"
    => "Hello World"
- textContent: Another way to access and modify text is to use this 
    property. It will retrieve/set all text content
    //Set
    -> const mainGreeting = document.getElemenById("main-greeting");
    -> mainGreeting.textContent = "It's changed";
    => "Hello World" ~> "It's changed"

What's the difference?
1. innerText is aware of the rendered appearance of text, while textContent
    is not
2. textContent gets the content of all elements, including '<script>' and
    '<style>' elements. In contrast, innerText only shows "human-readable"
    elements

//--- Accessing HTML ---//
If you need to access the HTML of an element, you can use innerHTML. This 
will inlcude all the elements inside of the one you selected.
You can retrieve and overwrite HTML elements. If you need to change any HTML,
you can assign a new value to the innerHTML:
    -> <section id="main-greeting">
        <article>Hello World!</article>
       </section>
    -> const mainGreeting = document.getElementById("main-greeting")
    -> mainGreeting.innerHTML = "<article>Just Changed!</article>"

Another reason it's less common to use innerHTML is that you need the string
to be valid HTML for everything to work, which can be quite tedious to build
- and some security concerns -

//--- Styling ---//
Aside from the text or HTML of an element, it's very common that you'll want
to change the inline style for an element. You can access any inline CSS 
properties on an element using the style property:
    -> <h1 style="color: black; background-color: red;">
        Hello everyone!
       </h1>
    -> const mainHeading = document.querySelector("h1")
    -> mainHeading.style.color 
    => "black"

How about background color?
Let's go and change the background-color CSS property:
    -> const mainHeading = document.querySelector("h1");
    -> mainHeading.style.background-color;
    => Error
Make sure to camelCase
    -> mainHeading.style.backgroundColor = "green";

//--- Changing Multiple Elements ---//
Now that you've seen how to modify styles, attributes, and text. How can we
modify multiple elements at once? To do this we need to loop over multiple
elements:
    -> const listItems = document.querySelectorAll("li");
    -> for(let listItem of listItems) {
        listItem.style.color = "red";
       }
    ------------------
    -> const imgs = document.querySelectorAll("img");
    -> for(let img of imgs) {
        img.style.width = "100px";
        img.style.border = "2px solid green";
       }

//--- Modifying Attributes ---//
The third most common thing you'll be modifying are attributes for an element
To do that, we can get attributes using 'getAttribute' and modify attributes 
using 'setAttribute'

As quick refresher, attributes are part of every HTML element that modify an 
HTML element. An attribute either modifies the default fucntionality of an element
type or provides functionality (src, href, class, id, type, value, etc.)

- getAttribute: In order to access an attribute on an element
    -> const firstInput = document.querySelector("input")
    -> firstInput.getAttribute("type")
    => "text"
- setAttribute: To set an attribute on an element
    -> const firstInput = document.querySelector("input")
    -> firstInput.setAttribute("type", "email")
    => "text"

There are a few attributes that you can directly access and modify as well 
instead of having to use getAttribute or setAttribute. One of those is 'id'
    -> <input type="text" id="first-name">
    -> const firstInput = document.querySelector("input")
    -> firstInput.id //=> "first-name"
    -> firstInput.id = "full-name" //=> changes the attribute

A more common one you will use is the 'value' attribute with forms in HTML
    -> <input type="text">
    -> const firstInput = document.querySelector("input")
    -> firstInput.value //=> ""
    -> firstInput.value = "Just added some value" //=> changes the attribute

//--- Manipulating classes ---// 
We have quite a few ways to manipulate the class attribute in JavaScript:
- setAttribute("class"): this will override the class
- className: this will give you a string representation of the class
- classList: this will give you an array-like object to add, remove or toggle
    classes
    -> const todo = document.querySelector("li");
    -> todo.getAttribute("class") //=> "todo"
    ------------------
    -> todo.classList.remove("todo");
    -> todo.className //=> ""
    ------------------
    -> todo.classList.add(completed);
    -> todo.className //=> "todo completed"

//--- Creating Elements ---//
To create an HTML element, we can use the 'createElement' function and pass
in the name of the element. This just makes an empty element, so if we want
to add any text, attributes or styling we will have to do that on another 
line:
    -> const newButton = documnet.createElement("button");
    -> const newUnorderdList = document.createElement("ul");
    -> const newDiv = document.createElement("div");
    -> newDiv.innerText = "a brand new div";
    -> newDiv.style.color = "tomato";

Appending Elements:
After you create an element, you need to place it in the DOM to see it. You
can do this using the 'append' method.
- append: Method that a parent element calls and you pass in the child element
    that you would like to place inside of the parent element
    -> const ul = document.querySelector("ul");
    -> const newLi = document.createElement("li");
    -> newLi.innerText = "Hello";
    -> ul.append(newLi);

Removing Elements:
If we want to remove elements in the DOM, we can use the handy 'remove' method.
In order to remove a method we first need to find it:
    -> const ul = document.querySelector("ul");
    -> ul.remove();

//--- Finding elements near another element ---//
As you start adding and removing elements in the DOM, there are times where you
might want to know not only information about an element, but it's parents or
children.
You might want to:
- Find an element and remove some or all of its children
- Find an element and add an element to one of its children

Accessing a parent element:
If you want to access the parent element of another element, you can use the 
'parentElement' method

Accessing the children of an element:
If you want to access the child elements of another element, you can use the 
'children' method. Ther is also 'firstElementChild' & 'lastElementChild'.

Accessing siblings:
To extract related element we can use the 'siblings', 'nextElementSibling' &
'previousElementSibling' methods

//--- Nodes vs. Elements ---//
With some of these finder methods, you will see that you don't always get
back an HTML element, you sometimes get back what is called a text node.

Everything in the DOM is a node, some nodes are not actually HTML elements,
but text or even comments. 'childNodes' as a method
